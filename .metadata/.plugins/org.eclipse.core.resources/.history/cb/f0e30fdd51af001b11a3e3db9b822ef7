

abstract class MyList {

  def head: Int
  def tail: MyList
  def isEmpty: Boolean
  def add(Element: Int): MyList
  def printElements: String
  //polymorphic call
  override def toString: String = "[" + printElements + "]"
}

object Empty extends MyList {

  def head: Int = throw new NoSuchElementException
  def tail: MyList = throw new NoSuchElementException
  def isEmpty: Boolean = true
  def add(Element: Int): MyList = new cons(Element, Empty)
  def printElements: String = ""
}

class cons(h: Int, t: MyList) extends MyList {

  def head: Int = h
  def tail: MyList = t
  def isEmpty: Boolean = false
  def add(Element: Int): MyList = new cons(Element, this) 
  def printElements: String =
    if (t.isEmpty) " " + h
    else h + " " + t.printElements

}

object ListTest extends App {
  val list = new cons(1, new cons(2, Empty))
  println(list.head)
  println(list.tail.head)
  println(list.add(4).head)
  println(list.isEmpty)
  println(list.toString())

}

























